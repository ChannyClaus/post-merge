# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v3

      # Runs a single command using the runners shell
      - run: uv run alembic upgrade head
        env:
          DB_URL: postgresql://postgres@localhost:5432/postgres
        id: alembic_upgrade

      # TODO: may be cleaner separating this into a separate job.
      - if: ${{ failure() }} && steps.alembic_upgrade.conclusion == 'failure'
        id: head_on_main
        run: |
          git fetch origin main &&
          git checkout origin/main &&
          (echo -n "revision=" && uv run python head_revision.py) >> $GITHUB_OUTPUT

      - if: ${{ failure() }} && steps.alembic_upgrade.conclusion == 'failure'
        run: |
          git checkout - &&
          uv run python rebase.py --new-parent "${{ steps.head_on_main.outputs.revision }}"

      - if: ${{ failure() }} && steps.alembic_upgrade.conclusion == 'failure'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: rebasing the migration with the new parent revision "${{ steps.head_on_main.outputs.revision }}"
